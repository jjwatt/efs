#+TITLE: Jesse Wattenbarger Customizations
#+OPTIONS: toc:2 num:nil ^:nil

* Jesse Wattenbarger's Pseudo-literate Emacs Configuration
I'm using emacs24-starterkit for now. I'm not sure if I'll stick with
it, but I do think I'll stick with a literate-style config. I keep
coming back to this as my favorite emacs config.

I haven't taken the time to learn the machinery of what exactly
starterkit does yet. I'm sure there are ways to selectively export and
load code blocks. I'll document them here if I ever need to do
that. For now, assume all babel emacs-lisp blocks in this file get tangled into
elisp startup files and loaded by emacs.

* Trying this out
Here I'm just trying to get started with this new config using
emacs24-starter kit literate programming style.  I'm a little confused
already because my normal keybindings aren't working. Ah, apparently
org is freaking out. Let's see what version of org my emacs is using.

Yep, it's not being loaded right.  I think I want to try out cask, but
I'm not sure if it will conflict with starter kit.  For now, I'm just
going to install org under src and restart emacs.  Just to make sure
it gets loaded, for now, I'll define ORG_HOME inside init.el. I'll git
clone the latest version into =.emacs.d/src/org-mode= and point
ORG_HOME there.

#+BEGIN_SRC sh
git clone git://orgmode.org/org-mode.git $HOME/.emacs.d/src/org-mode
#+END_SRC

You should at least =make autoloads= in org-mode.

#+BEGIN_SRC sh
cd ~/.emacs.d/src/org-mode
make autoloads
#+END_SRC

You can point org-mode's make at a different emacs with:

#+BEGIN_SRC sh
make EMACS=~/local/bin/emacs-latest autoloads
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar my-home (getenv "HOME"))
(defvar my-src (expand-file-name "src" my-home))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setenv "ORG_HOME" (expand-file-name ".emacs.d/src/org-mode" my-home))
(defvar my-org-home (getenv "ORG_HOME"))
#+END_SRC

* Does org-mode work better now?
It looks like org-mode might be working better now. Yes, the enter key
does what I expect, and auto-fill is working.

* Packages
I'm not sure if the starter-kit is supposed to install packages
automatically, but it keeps erroring here and there after I add more
of the starter kit below. It's annoying to constantly have to
package-install after you see it fail, so let's just use cask.
  - [[http://cask.github.io/][Cask Website]]

** Cask
Cask is a package manager for emacs. It uses the elpa package
management in the background, but makes things like dependency
management, package sourcing, switching things around, and even
package building and development a little easier. This should get us
set up.
#+BEGIN_SRC sh
mkdir -p $HOME/src
git clone https://github.com/cask/cask.git $HOME/src/cask
#+END_SRC

#+BEGIN_SRC sh
export PATH="$HOME/src/cask/bin:$PATH"
#+END_SRC

#+BEGIN_SRC sh
cd $HOME/.emacs.d/
cask init
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'cask (expand-file-name "cask/cask.el" my-src))
(cask-initialize)
#+END_SRC

** Using Cask
Run cask install to install dependencies.
#+BEGIN_SRC sh
cask install
#+END_SRC

*** Cask with Other Emacs
If you're like me and you build your own emacs from source or you have
different emacs installed in different locations (besides
=/usr/bin/emacs=), and especially if you go back and forth between
different versions sometimes, you might notice that cask isn't
installing packages for that particular version of emacs. It will use
the default 'emacs' binary in your PATH. I looked at the cask binary,
and it's a Python script. Luckily, I didn't have to hack it because
cask *does* look at the EMACS environment variable to pick an emacs to
use before settling on the one in your PATH. Just set EMACS to the
binary path of your desired version of emacs. For me, it's in
=~/local/bin/emacs-latest=.

#+BEGIN_SRC sh
export EMACS=$HOME/local/bin/emacs-latest
cask install
#+END_SRC

You should probably set this in your .bashrc or .zshrc, too. Here,
I'll set it in my emacs config.

#+BEGIN_SRC emacs-lisp
(setenv "EMACS" (expand-file-name "local/bin/emacs-latest" my-home))
#+END_SRC

*** My Cask file
Here's my Cask file included directly in my emacs org config for
tangling. Now, I can add dependencies directly from this file and not
worry about maintaining a separate Cask file.

I'm labeling the src as lisp instead of emacs-lisp just in case
starter kit would decide to tangle it into my .el file.

Use =C-c-v-t= to tangle code blocks.

#+BEGIN_SRC lisp :tangle Cask :exports code
(source melpa)
(source marmalade)
(source gnu)

(depends-on "cask")
(depends-on "dash")
(depends-on "drag-stuff")
(depends-on "expand-region")
(depends-on "magit")
(depends-on "multiple-cursors")
(depends-on "popwin")
(depends-on "projectile")
(depends-on "s")
(depends-on "smex")
(depends-on "wrap-region")
(depends-on "yasnippet")
(depends-on "paredit")
(depends-on "idle-highlight-mode")
(depends-on "whitespace-cleanup-mode")
(depends-on "rainbow-delimiters")
(depends-on "rainbow-mode")
(depends-on "undo-tree")
(depends-on "ace-jump-mode")
(depends-on "key-chord")
(depends-on "clojure-mode")
(depends-on "haskell-mode")
(depends-on "markdown-mode")
(depends-on "smartparens")
(depends-on "js-comint")
(depends-on "skewer-mode")
(depends-on "geiser")
(depends-on "dropdown-list")
(depends-on "color-theme-solarized")
(depends-on "multi-term")
(depends-on "flatland-theme")
(depends-on "grubber-darker-theme")
(depends-on "github-theme")
(depends-on "gruvbox-theme")
(depends-on "heroku-theme")
(depends-on "inkpot-theme")
(depends-on "moe-theme")
(depends-on "monokai-theme")
(depends-on "noctilux-theme")
(depends-on "nzenburn-theme")
(depends-on "pastels-on-dark-theme")
(depends-on "phoenix-dark-mono-theme")
(depends-on "phoenix-dark-pink-theme")
(depends-on "qsimpleq-theme")
(depends-on "reverse-theme")
(depends-on "soothe-theme")
(depends-on "soft-morning-theme")
(depends-on "subatomic-theme")
(depends-on "subatomic256-theme")
(depends-on "sublime-themes")
#+END_SRC

**** TODO Break up Cask file into organized blocks and descriptions

** Add Other Directories to Load Path
*** TODO Automatically add anything under subs to the load path
*** But, for now
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/subs/pretty-symbols"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/subs/slime"))
#+END_SRC
** Add Theme Directories
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/subs/base16"))
#+END_SRC
* Smart Parens
#+BEGIN_SRC emacs-lisp
;; don't always use smartparens
(require 'smartparens)
(setq smartparens-global-mode nil)
#+END_SRC

* Pretty Symbols Mode
#+BEGIN_SRC emacs-lisp
(setq pretty-symbol-categories '(lambda relational logical))
(require 'pretty-symbols)
#+END_SRC
* Load more of starter-kit
** Python
I don't like the python-mode in starter kit. See below where I do my
own Python initialization.
** Eshell
 #+BEGIN_SRC emacs-lisp
;; invalid function in latest emacs from git
(starter-kit-load "eshell")
 #+END_SRC

** Lisp
This should load elisp, scheme, cl, and clojure stuff.
At least, according to [[file:starter-kit-lisp.org][starter-kit-lisp.org]].
#+BEGIN_SRC emacs-lisp
(starter-kit-load "lisp")
#+END_SRC

** Javascript
#+BEGIN_SRC emacs-lisp
;; (starter-kit-load "js")
#+END_SRC

Starter kit uses espresso-mode. I haven't used it much, but I don't
mind giving it a shot. I can always go back to js2-mode or switch
between the two. So, I'll leave that alone for now. But, I'll add
js-comint for getting a js repl inside emacs. I'll set it up to use
node.js for now. You can really use any js interpreter (e.g., Rhino,
Spidermonkey, node.js).

#+BEGIN_SRC emacs-lisp
(require 'js-comint)
(setq inferior-js-program-command "~/bin/node")
#+END_SRC

I'm not sure if espresso-mode has send-sexp functions or not, so I'll
just leave those out for now. Otherwise, js-comint recommends
something like this.

#+BEGIN_SRC emacs-lisp
(add-hook 'js2-mode-hook '(lambda () 
			    (local-set-key "\C-x\C-e" 'js-send-last-sexp)
			    (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
			    (local-set-key "\C-cb" 'js-send-buffer)
			    (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
			    (local-set-key "\C-cl" 'js-load-file-and-go)
			    ))
#+END_SRC

*** Switching to js2-mode by default
**** TODO Look into why js2 mode isn't always loading
**** TODO Look into why pretty-symbols-mode is not starting
Looks like it's because the load-path was not getting initialized.
No time to fix it now.

#+BEGIN_SRC emacs-lisp
(define-abbrev-table 'js2-mode-abbrev-table '())
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . js2-mode))
;; (add-hook 'js-mode-hook 'moz-minor-mode)
;; (add-hook 'js2-mode-hook 'turn-on-paredit)
(add-hook 'js2-mode-hook 'run-starter-kit-coding-hook)
(add-hook 'js-mode-hook 'idle-highlight)
(add-hook 'js2-mode-hook '(lambda()
                            ;; (pretty-symbols-mode)
                            (abbrev-mode)
                            (smartparens-mode)
                            (setq js-indent-level 2)
                            (setq js2-basic-offset 2)))
#+END_SRC

*** Since pretty-symbols-mode does not appear to be working right now
Turn function into pretty f symbol in js2-mode.
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords
 'js2-mode `(("\\<\\(function\\) *("
              (0 (progn (compose-region (match-beginning 1)
                                        (match-end 1) "\u0192") nil)))))
#+END_SRC
*** Trying out slime and swank-js
#+BEGIN_SRC emacs-lisp
;; (global-set-key [f5] 'slime-js-reload)
;; (add-hook 'js2-mode-hook
;;           (lambda ()
;;             (slime-js-minor-mode 1)))
#+END_SRC
*** Now trying skewer-mode
#+BEGIN_SRC emacs-lisp
;; (when (package-installed-p 'skewer-mode))
;; (add-hook 'js2-mode-hook 'skewer-mode)
#+END_SRC

*** js2-refactor
#+BEGIN_SRC emacs-lisp
;; js2-refactor
(require 'package)
(when (package-installed-p 'js2-refactor)
  (eval-after-load "js2-mode"
    '(progn
       (js2r-add-keybindings-with-prefix "C-c C-m")
       (define-key js2-mode-map (kbd "C-c C-g") 'js2r-add-to-globals-annotation))))
#+END_SRC
*** Coffee Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'coffee-mode-hook
          (lambda ()
            (define-key coffee-mode-map (kbd "M-r") 'coffee-compile-buffer)
            (define-key coffee-mode-map (kbd "M-R") 'coffee-compile-region)
            (define-key coffee-mode-map (kbd "<tab>") 'coffee-indent)
            (define-key coffee-mode-map (kbd "<backtab>") 'coffee-unindent)))
(add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
(add-to-list 'auto-mode-alist '("\\.cson$" . coffee-mode))
;; Use js2-mode for displaying compiled CS
(setq coffee-js-mode 'js2-mode)
;; Handle backtabs and indenting regions
(defun coffee-indent-block ()
  (shift-region coffee-tab-width)
  (setq deactivate-mark nil))

(defun coffee-unindent-block ()
  (shift-region (- coffee-tab-width))
  (setq deactivate-mark nil))

(defun coffee-indent ()
  (interactive)
  (if (and (boundp 'ac-trigger-command-p) (ac-trigger-command-p last-command))
      (auto-complete)
    (if mark-active
        (coffee-indent-block)
      (indent-for-tab-command))))

(defun coffee-unindent ()
  (interactive)
  (if mark-active
      (coffee-unindent-block)
    (progn
      (indent-line-to (- (current-indentation) coffee-tab-width)))))
#+END_SRC

*** Skeletons and Templates
Read more about skeletons in the Emacs Autotype manual (C-h i m a)
***** TODO prompt for extra context exports
#+BEGIN_SRC emacs-lisp
(define-skeleton jwatt/js-setup-repl-skel
  "Inserts some repl setup for node."
  nil
  "var repl = require('repl');\n"
  "var _ = require('lodash');\n\n"
  "var context = repl.start({
    prompt: '* ' + __dirname + ' > ',
    terminal: true,
    useColors: true,
    input: process.stdin,
    output: process.stdout
    }).context;\n"
  _
  )

(define-skeleton jwatt/js-require-skel
  "Inserts a require."
  "Require: "
  "var " _ " = require('" str "');"
)

(define-skeleton jwatt/js-fn-skel
  "Insert an anonymous function."
  nil
  "function("
  ("Var:" str ", ")
  & -2
  ") {" ?\n
  > _ ?\n
  >"}")

(define-skeleton jwatt/js-console-log
  "Insert a console.log()"
  nil
  > "console.log("_ ");")


(require 'tempo)
(setq tempo-interactive t)
(defvar tempo-initial-pos nil)
(defadvice tempo-insert (around tempo-insert-pos act)
  "Define initial position."
  (if (eq element '~)
      (setq tempo-initial-pos (point-marker))
    ad-do-it))
(defadvice tempo-insert-template (around tempo-insert-template-pos act)
  "Set initial position when defined."
  (setq tempo-initial-pos nil)
  ad-do-it
  (if tempo-initial-pos
      (progn
        (put template 'no-self-insert t)
        (goto-char tempo-initial-pos))
    (put template 'no-self-insert nil)))

(defvar js-tempo-tags nil)
(tempo-define-template "js-if"
                       '(> "if (" ~ ") {" n>
                           > n
                           "}" > n>
                           )
                       "if"
                       "Insert a js if statement"
                       'js-tempo-tags)

(define-abbrev js2-mode-abbrev-table "8req" "" 'jwatt/js-require-skel)
(define-abbrev js2-mode-abbrev-table "8fn" "" 'jwatt/js-fn-skel)
(define-abbrev js2-mode-abbrev-table "8l" "" 'jwatt/js-console-log)
(define-abbrev js2-mode-abbrev-table "8if" "" 'tempo-template-js-if)
#+END_SRC

** Misc-recommended
Let's see what this is like.
#+BEGIN_SRC emacs-lisp
(starter-kit-load "misc-recommended")
#+END_SRC
** Haskell
Load the starter-kit haskell.

Add this to your Cask.
#+BEGIN_SRC lisp
(depends-on "haskell-mode")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(starter-kit-load "haskell")
#+END_SRC

* YASnippet setup
#+BEGIN_SRC emacs-lisp
(require 'dropdown-list)
(setq yas-prompt-functions '(yas-dropdown-prompt
                             yas-ido-prompt
                             yas-completing-prompt))
#+END_SRC

* Python
** Basic Python Setup
#+BEGIN_SRC emacs-lisp
  (require 'python)

  ;; setup completion, etc. for IPython
  (setq
   python-shell-interpreter "ipython"
   python-shell-interpreter-args ""
   python-shell-prompt-regexp "In \\[[0-9]+\\]: "
   python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
   python-shell-completion-setup-code
     "from IPython.core.completerlib import module_completion"
   python-shell-completion-module-string-code
     "';'.join(module_completion('''%s'''))\n"
   python-shell-completion-string-code
     "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")

  (setq python-skeleton-autoinsert t)
  ;; TODO: Use a different directory for pydoc-info?
  ;; TODO: Only run this if pydoc-info is installed
  ;; (add-to-list 'load-path (expand-file-name "~/.emacs.d/subs/pydoc-info"))
  ;; (require 'pydoc-info)
  ;; (info-lookup-add-help
  ;;    :mode 'python-mode
  ;;    :parse-rule 'pydoc-info-python-symbol-at-point
  ;;    :doc-spec
  ;;    '(("(python)Index" pydoc-info-lookup-transform-entry)
  ;;      ("(TARGETNAME)Index" pydoc-info-lookup-transform-entry)))
#+END_SRC

* Scheme and Geiser
#+BEGIN_SRC emacs-lisp
(setq geiser-active-implementations '(guile))
#+END_SRC

* Org-mode
Arguably the most important for me. In my previous config, I
autoloaded files from an init.d directory under my .emacs.d. I'll just
start ripping pieces out of my org.el and making them work here. It
will be a lot more organized than my current org.el.  Let's get
started.

** Load Path
I should already have org-mode loaded by the starterkit and my
ORG_HOME, so I shouldn't need to add it to my load path anymore. I
want to make sure the contrib directory for org-mode is in my load
path, though. I'll setup the mode-alist here, too (and possibly other
top-level stuff later).


#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "contrib/lisp" my-org-home))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
;; this probably isn't needed with the starter-kit
(setq  org-insert-mode-line-in-empty-file t)
(require 'org)
#+END_SRC

** Global Org Keys
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Local Org Keys
I'm leaving this commented for now because I haven't pulled in
org-pomodoro yet.
#+BEGIN_SRC emacs-lisp
;; (local-set-key "\C-co" 'org-pomodoro)
#+END_SRC

** Org Directories and Special Files
I use =~/org= as my base. I also have an =~/org/personal= directory
that is encrypted, but it gets dynamically loaded in special agenda
views which you can see later on.
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-default-ideas-file (concat org-directory "/ideas.org"))
  (setq org-agenda-files '("~/org"))
  (setq org-refile-targets '((nil :maxlevel . 2)
                             (org-agenda-files :maxlevel . 1)))
#+END_SRC

** Other Org Settings Variables
I won't explain each setting variable right now, but I'll try to group
them all here.
#+BEGIN_SRC emacs-lisp
    (setq org-log-done 'time)
    (setq org-refile-use-outline-path 'file)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-enforce-todo-dependencies t)
    (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-agenda-dim-blocked-tasks t)

  ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

  ; Use IDO for both buffer and file completion and ido-everywhere to t
  (setq org-completion-use-ido t)
  (setq ido-everywhere t)
  (setq ido-max-directory-size 100000)
  (ido-mode (quote both))

  ; Use the current window when visiting files and buffers with ido
  (setq ido-default-file-method 'selected-window)
  (setq ido-default-buffer-method 'selected-window)

  ;; remember clocking between sessions
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)

  ;; logbook drawer and clocking
  (setq org-log-into-drawer t)
  (setq org-clock-into-drawer t)

  ;; archive setup
  (setq org-archive-mark-done nil)
  (setq org-archive-location "%s_archive::* Archived Tasks")

  ;; preserve indentation for babel (makefiles)
  (setq org-src-preserve-indentation t)
#+END_SRC

** Org Hooks
If you didn't know, emacs loves hooks (as most interactive and
programmable software should). You can add hooks for
different modes that enable other modes, set variables, or do anything
at all really. Here is where I setup some hooks for org-modes.

I like abbrev-mode. honestly, I haven't been using auto-fill mode
lately. I'll comment it out for now.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (abbrev-mode t)))
  (add-hook 'org-mode-hook (lambda () (remove-hook 'before-save-hook 'whitespace-cleanup)))
  ;; (add-hook 'org-mode-hook 'auto-fill-mode)
  ;; (add-hook 'org-capture-mode-hook 'auto-fill-mode)
#+END_SRC

** Org Tasks
These can be overrided or appended per-file. But, these are my default
tasks types.
#+BEGIN_SRC emacs-lisp
  ; Setup Tasks
  (setq org-todo-keywords
        (quote (
        (type "NOTE(N)" "IDEA(i)" "|" "DISMISSED")
        (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE")
        )))
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "tomato" :weight bold)
                ("NEXT" :foreground "wheat" :weight bold)
                ("DONE" :foreground "spring green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "dim gray" :weight bold)
                ("PHONE" :foreground "orchid" :weight bold)
                ("NOTE" :foreground "dark turquoise" :weight bold)
                ("IDEA" :foreground "yellow1" :weight bold))))
#+END_SRC
** Capture Templates
These are for quickly capturing stuff from any buffer in emacs. These
are awesome. If you use org-mode, but have never used the capture-mode
stuff, try it out! Mine is fairly basic right now. Notes, Ideas,
Todos, and I added Work Journal and Journal entries because I use
separate journal.org files for writing longer journal-like entries.
#+BEGIN_SRC emacs-lisp
;; capture templates
(setq org-capture-templates
      '(("t" "Todo" entry (file org-default-notes-file)
        "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
        ("n" "Note" entry (file org-default-notes-file)
         "* NOTE %? %^G\n%U\n  %i\n  %a\n")
        ("i" "Idea" entry (file org-default-ideas-file)
         "* IDEA %?\n%U\n%a\n" :clock-in t :clock-resume t)
        ("J" "Work Journal" entry
         (file+datetree (concat org-directory "/journal.org"))
         "* %?\nEntered on %U\n  %i\n  %a")
        ("j" "Personal Journal" entry
         (file+datetree (concat org-directory "/personal/journal.org"))
         "* %?\nEntered on %U\n  %i\n  %a")
        ("x" "X selection" entry (file org-default-notes-file)
         "* %? \n%U\n  %i\n  %x\n")))
#+END_SRC

** Agendas
I like most of the default agenda commands, but since I want to keep
separate agendas for work and personal stuff, I just use hooks to bind
resetting the =org-agenda-files= variable before building my
agendas. Yes, I love you org-mode, I love you lisp, and I love you
emacs.

Define Agenda Files. By default, I use all files ending in =.org= and
=.org.gpg=. The default place for my agenda files is the same as my
org-directory. So any files that match this regexp in there will be
considered for the agenda views.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-file-regexp "\\`[^.].*\\.org\\(\\.gpg\\)?\\'")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("P" "Personal agenda"
         agenda "Personal" ((org-agenda-files '("~/org/personal"))
                            ))
        ("A" "Agenda for everything"
          agenda "Everything"
          ((org-agenda-files '("~/org" "~/org/personal"))
           ))))
#+END_SRC

** Babel
Here are a few config items for Babel, code blocks and literate
programming. I'm sure this section will get bigger as I'm getting
really into LP lately. It's one reason why I'm getting down with this
emacs24-starter-kit joint.
#+BEGIN_SRC emacs-lisp
;; stuff for code blocks
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)

;; load languages with babel
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
                                    (R . t)
                                    (python . t)
                                    (sh . t)
                                    (dot . t)
                                    (ditaa . t)
                                    (ruby . t)
                                    (gnuplot . t)
                                    (clojure . t)
                                    (ledger . t)
                                    (org . t)
                                    (plantuml . t)
                                    (latex . t)
                                    (makefile . t))))
;; Do not prompt to confirm evaluation
(setq org-confirm-babel-evaluate nil)

;; Use fundamental mode when editing plantuml blocks
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

#+END_SRC

** Skeletons and Abbrevs
#+BEGIN_SRC emacs-lisp
(define-skeleton jwatt/org-src-name-block
  "Insert #+name"
  "name: "
  > "#+name: " str
  ?\n "#+begin_src "
  ("headers:" str " ")
  & -1
  ?\n _ ?\n
  "#+end_src"
  )


(define-abbrev org-mode-abbrev-table "<sn" "" 'jwatt/org-src-name-block)
#+END_SRC
** Custom Org Functions
*** Org Archiving
I stole this from (TODO: insert ref). He has a great setup, and his
literate org guide is an excellent way to get started with org-mode.
#+BEGIN_SRC emacs-lisp
(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))
#+END_SRC
*** Publishing
**** Setup
Most of this publishing setup was taken from the norang doc, and I've
modified it to suite my needs over time.

#+BEGIN_SRC emacs-lisp
; Inline images in HTML instead of producting links to the image
(setq org-html-inline-images t)

; Use org.css from the norang website for export document stylesheets
;; (setq org-html-head-extra "<link rel=\"stylesheet\" href=\"http://doc.norang.ca/org.css\" type=\"text/css\" />")
;; (setq org-html-head-include-default-style nil)

; Do not generate internal css formatting for HTML exports
;; (setq org-export-htmlize-output-type (quote css))
; Export with LaTeX fragments
(setq org-export-with-LaTeX-fragments t)
; Increase default number of headings to export
(setq org-export-headline-levels 6)

; I'm lazy and don't want to remember the name of the project to publish when I modify
; a file that is part of a project.  So this function saves the file, and publishes
; the project that includes this file
;
; It's bound to C-S-F12 so I just edit and hit C-S-F12 when I'm done and move on to the next thing
(defun bh/save-then-publish (&optional force)
  (interactive "P")
  (save-buffer)
  (org-save-all-org-buffers)
  (let ((org-html-head-extra)
        (org-html-validation-link "<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>"))
    (org-publish-current-project force)))

(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
#+END_SRC
**** LaTeX setup and exports
This is from the [[http://orgmode.org/worg/org-faq.html][org-mode FAQ]].
#+BEGIN_QUOTE
How can I get colored source code when exporting to LaTeX?

As of Sun Aug 9 2009 the "current" version of Org-mode (see keeping-current-with-Org-mode-development) supports exporting source code to LaTeX using the listings package.

To turn on listing export add the following to your Org-mode customization. 
#+END_QUOTE
#+BEGIN_SRC emacs-lisp :tangle no :exports no
;; require org-latex so that the following variables are defined
;; (require 'org-latex)

;; tell org to use listings
;; (setq org-export-latex-listings t)

;; you must include the listings package
;; (add-to-list 'org-export-latex-packages-alist '("" "listings"))

;; if you want colored source code then you need to include the color package
;; (add-to-list 'org-export-latex-packages-alist '("" "color"))
#+END_SRC

However, I think it's out of date compared to org-mode 8+. I found
this link that seems a little more up-to-date:
[[http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html][org-mode 8 and pdf export]]

For this to work, python pygments and the LaTeX minted packages need
to be installed.
#+BEGIN_SRC sh :tangle no :exports code
pip install pygments
#+END_SRC

I think Ubuntu includes the minted LaTeX package in
texlive-latex-recommended or -extra.
#+BEGIN_SRC emacs-lisp
;; Include the latex-exporter
(require 'ox-latex)
;; Add minted to the defaults packages to include when exporting.
(add-to-list 'org-latex-packages-alist '("" "minted" "" "cite"))
;; Tell the latex export to use the minted package for source
;; code coloration.
(setq org-latex-listings 'minted)
;; Let the exporter use the -shell-escape option to let latex
;; execute external programs.
;; This obviously and can be dangerous to activate!
;; jwatt: I'm not sure if i need to do this.
;; (setq org-latex-pdf-process
;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

***** LaTeX pdf process
If LaTeX exporting isn't working, then this is probably why.
I'm trying to use latexmk because of my use of minted for source code
and bibtex for citations. I'm not sure if a regular latex compile will
run the right number of times.

#+BEGIN_SRC emacs-lisp
;; Use latexmk for PDF export
(setq org-latex-pdf-process
      (list "latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -bibtex -pdf -f %f"))
#+END_SRC

***** BibTeX Setup
#+BEGIN_SRC emacs-lisp
;; Configure RefTeX for use with org-mode. At the end of your
;; org-mode file you need to insert your style and bib file:
;; \bibliographystyle{plain}
;; \bibliography{ProbePosition}
;; See http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/
;; (setq-default TeX-master t)
(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name)
       (file-exists-p (buffer-file-name))
       (reftex-parse-all))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
  )
(add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_SRC

**** Project Exports
#+BEGIN_SRC emacs-lisp
(setq org-alphabetical-lists t)
;; Explicitly load required exporters
(require 'ox-html)
(require 'ox-ascii)
;; project publishing
(setq org-publish-project-alist
           '(("niweek-notes"
              :base-directory "~/niweek/"
              :publishing-directory "~/public_html"
              :html-head "<link rel=\"stylesheet\"
                         href=\"css/worg.css\"
                         type=\"text/css\"/>"
              :base-extension "org"
              :recursive t
              :publishing-function org-html-publish-to-html
              :headline-levels 4             ; Just the default for this project.
              :auto-preamble t)
             ("niweek-static"
              :base-directory "~/niweek/"
              :publishing-directory "~/public_html"
              :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
              :recursive t
              :publishing-function org-publish-attachment)
             ("project-support"
              :base-directory "~/org/ps/"
              :publishing-directory "~/public_html"
              :html-head "<link rel=\"stylesheet\"
                         href=\"css/worg.css\"
                         type=\"text/css\"/>"
              :base-extension "org"
              :recursive t
              :publishing-function org-html-publish-to-html
              :headline-levels 4
              :with-drawers t
              :html-html5-fancy t
              :auto-preamble t)
             ("project-support-static"
              :base-directory "~/org/ps/"
              :publishing-directory "~/public_html"
              :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
              :recursive t
              :publishing-function org-publish-attachment)))
#+END_SRC

*** Pomodoro
TODO: Leaving Pomodoro functions out for now. I need to pull in those dependencies.

* Markdown
Add this to your Cask.
#+BEGIN_SRC lisp
(depends-on "markdown-mode")
#+END_SRC

* Defaults
Some better defaults. I'm not sure if starter-kit loads these or not yet.
#+BEGIN_SRC emacs-lisp
  (progn
    (ido-mode t)
    (setq ido-enable-flex-matching t)

    (menu-bar-mode -1)
    (when (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
    (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

    (require 'uniquify)
    (setq uniquify-buffer-name-style 'forward)

    (require 'saveplace)
    (setq-default save-place t)

    (global-set-key (kbd "M-/") 'hippie-expand)
    (global-set-key (kbd "C-x C-b") 'ibuffer)

    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)
    (global-set-key (kbd "C-M-s") 'isearch-forward)
    (global-set-key (kbd "C-M-r") 'isearch-backward)

    (setq tramp-copy-size-limit 1000000)

    ;; TODO: should probably move this to a different section.
    (setq smex-save-file (concat user-emacs-directory ".smex-items"))
    (smex-initialize)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

    (show-paren-mode 1)
    (setq-default indent-tabs-mode nil)
    (setq x-select-enable-clipboard t
          x-select-enable-primary t
          save-interprogram-paste-before-kill t
          apropos-do-all t
          mouse-yank-at-point t
          save-place-file (concat user-emacs-directory "places")
          backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                   "backups")))))
#+END_SRC

* Encryption
Make sure epa (EasyPG) is enabled for encryption.

More on encryption and encryption with org-mode here:
[[http://orgmode.org/worg/org-tutorials/encrypting-files.html][Org Mode Encryption]]

More on EasyPG in the manual:
[[http://www.gnu.org/software/emacs/manual/html_mono/epa.html#Quick-start][EasyPG Manual]]

#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(epa-file-enable)
#+END_SRC

** Auto encrypt/decrypt files
With the EasyPG Agent, any file that ends in =.gpg= will be
encrypted. However, emacs modes are usually turned on based on the
filename. So, you will want to add a mode setting to the top of all of
your =*.org= files and any files for which you'd like to turn on
modes. Adding file-level settings is a good idea in the first place.

#+BEGIN_SRC org
# -*- mode:org; epa-file-encrypt-to: ("me@mydomain.com") -*-
#+END_SRC

Adding epa-file-encrypt-to to the file-level settings should help
ensure that epa doesn't keep asking for the key we want to use and the
pass phrase for the key.

I recommend setting up and using gpg-agent instead of storing
pass phrases in the cache: [[http://www.gnupg.org/documentation/manuals/gnupg/#Invoking-GPG_002dAGENT][GnuPG Manual]]

* Hooks
There are some dependencies here. You might need to add some packages
to Cask.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (defun pnh-add-watchwords ()
                            (font-lock-add-keywords
                             nil `(("\\<\\(FIX\\(ME\\)?\\|TODO\\)"
                                    1 font-lock-warning-face t)))))

(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'idle-highlight-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

(add-hook 'emacs-lisp-mode-hook 'paredit-mode)
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

* UI
I like a blinky cursor. I like a bigger fringe. Let's make sure we get
maximum font-lock-decoration.
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode)
(if (fboundp 'fringe-mode)
    (fringe-mode 10))

(global-font-lock-mode 1)
(setq font-lock-maximum-decoration t)
#+END_SRC

* Whitespace
#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face tabs spaces trailing lines space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark))
;; TODO: only turn this on for some programming modes. It keeps messing up makefiles.
;; (add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'make-file-mode-hook '(lambda ()
                                 (setq indent-tabs-mode t)
                                  (setq org-src-preserve-indentation t)))
;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

#+END_SRC

* Paths
Customize exec paths here in case your shell doesn't do it. If I rely
on programs run from elisp, I want to make sure that they're in my
=PATH=.

#+BEGIN_SRC emacs-lisp
;; setup any extra PATH stuff here for execution
(setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
(setq exec-path
      '(
        "/bin"
        "/usr/local/bin"
        "/usr/bin"
        "~/local/bin"
        (getenv "PATH")
        ))
#+END_SRC

* Themes
Add our themes directories that are outside of starter-kit, and may be
outside of melpa. Load a custom theme that you like here, too.
I'll start adding git submodules here, too.
#+BEGIN_SRC sh
mkdir -p $HOME/.emacs.d/subs
cd $HOME/.emacs
git submodule add https://github.com/neil477/base16-emacs.git subs/base16
#+END_SRC

I'm using solarized more than base16 again lately. Add this to your Cask:
#+BEGIN_SRC lisp
(depends-on "solarized-theme")
#+END_SRC

Or run =M-x= =package-install= =solarized-theme=.

#+BEGIN_SRC emacs-lisp
(load-theme 'solarized-dark t)
#+END_SRC

Try the base16 themes with =M-x= =load-theme= =base16-default=, etc.

* Fonts
I go through different fonts depending on my mood. Lately, I really
like =Meslo= fonts. You probably don't have this installed by default.
TODO: Give instructions on installing Meslo.
#+BEGIN_SRC emacs-lisp
;; (set-frame-font "Meslo LG M DZ" t)
(set-frame-font "PragmataPro:pixelsize=20")
#+END_SRC
Otherwise, I like using =terminus= a lot. If you're on a Debian-based
distro, you can probably get it with:
#+BEGIN_SRC sh
aptitude install xfonts-terminus
#+END_SRC

* UTF-8 Fun
These are just some fun unicode characters I found on github late one
night.
#+BEGIN_SRC emacs-lisp
(defun disapproval () (interactive) (insert "ಠ_ಠ"))
(defun eyeroll () (interactive) (insert "◔_◔"))
(defun tables () (interactive) (insert "（╯°□°）╯︵ ┻━┻"))
(defun mu () (interactive) (insert "無"))
(defun rectification () (interactive) (insert "正名"))
#+END_SRC

* IDO Setup
I've spread some ido setup around this file, and I should put it all
together at one point. Some of these are really important to me,
especially the vertical ido results.
#+BEGIN_SRC emacs-lisp
;; Display ido results vertically, rather than horizontally
(setq ido-decorations '("\n-> " "" "\n " "\n ..." "[" "]"
                        " [No match]" " [Matched]" " [Not readable]"
                        " [Too big]" " [Confirm]"))

(add-hook 'ido-minibuffer-setup-hook
          (defun ido-disable-line-truncation ()
            (set (make-local-variable 'truncate-lines) nil)))

(defun jf-ido-define-keys () ;; C-n/p is more intuitive in vertical layout
  (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))

(add-hook 'ido-setup-hook 'jf-ido-define-keys)
#+END_SRC

* Fancy keys
Let's get an undo tree, some ace-jump-mode and some key-chords going.
You might want to add these to your Cask:
#+BEGIN_SRC lisp
(depends-on "undo-tree")
(depends-on "ace-jump-mode")
(depends-on "key-chord")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)

(require 'ace-jump-mode)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)

(require 'key-chord)
(key-chord-define-global "jj" 'ace-jump-word-mode)
;;(key-chord-define-global "jl" 'ace-jump-line-mode)
;;(key-chord-define-global "jk" 'ace-jump-char-mode)
;;(key-chord-define-global "kk" 'just-one-space)
;;(key-chord-define-global "KK" 'delete-horizontal-space)
(key-chord-define-global "JJ" 'prelude-switch-to-previous-buffer)
(key-chord-define-global "uu" 'undo-tree-visualize)
(key-chord-mode 1)
#+END_SRC

