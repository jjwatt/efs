#+TITLE: Jesse Wattenbarger Customizations
#+OPTIONS: toc:2 num:nil ^:nil

* Trying this out
Here I'm just trying to get started with this new config using
emacs24-starter kit literate programming style.  I'm a little confused
already because my normal keybindings aren't working. Ah, apparently
org is freaking out. Let's see what version of org my emacs is using.

Yep, it's not being loaded right.  I think I want to try out cask, but
I'm not sure if it will conflict with starter kit.  For now, I'm just
going to install org under src and restart emacs.  Just to make sure
it gets loaded, for now, I'll define ORG_HOME inside init.el

#+BEGIN_SRC emacs-lisp
(defvar my-home (getenv "HOME"))
(defvar my-src (expand-file-name "src" my-home))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setenv "ORG_HOME" (expand-file-name ".emacs.d/src/org-mode" my-home))
#+END_SRC

* Does org-mode work better now?
It looks like org-mode might be working better now. Yes, the enter key
does what I expect, and auto-fill is working.

* Packages
I'm not sure if the starter-kit is supposed to install packages
automatically, but it keeps erroring here and there after I add more
of the starter kit below. It's annoying to constantly have to
package-install after you see it fail, so let's just use cask.
  - [[http://cask.github.io/][Cask Website]]

** Cask
Cask is a package manager for emacs. It uses the elpa package
management in the background, but makes things like dependency
management, package sourcing, switching things around, and even
package building and development a little easier. This should get us
set up.
#+BEGIN_SRC sh
mkdir -p $HOME/src
git clone https://github.com/cask/cask.git $HOME/src/cask
#+END_SRC

#+BEGIN_SRC sh
export PATH="$HOME/src/cask/bin:$PATH"
#+END_SRC

#+BEGIN_SRC sh
cd $HOME/.emacs.d/
cask init
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'cask (expand-file-name "cask/cask.el" my-src))
(cask-initialize)
#+END_SRC

** Using Cask
Run cask install to install dependencies.
#+BEGIN_SRC sh
cask install
#+END_SRC

*** Cask with Other Emacs
If you're like me and you build your own emacs from source or you have
different emacs installed in different locations (besides
=/usr/bin/emacs=), and especially if you go back and forth between
different versions sometimes, you might notice that cask isn't
installing packages for that particular version of emacs. It will use
the default 'emacs' binary in your PATH. I looked at the cask binary,
and it's a Python script. Luckily, I didn't have to hack it because
cask *does* look at the EMACS environment variable to pick an emacs to
use before settling on the one in your PATH. Just set EMACS to the
binary path of your desired version of emacs. For me, it's in
=~/local/bin/emacs-latest=.

#+BEGIN_SRC sh
export EMACS=$HOME/local/bin/emacs-latest
cask install
#+END_SRC

You should probably set this in your .bashrc or .zshrc, too. Here,
I'll set it in my emacs config.

#+BEGIN_SRC emacs-lisp
(setenv "EMACS" (expand-file-name "local/bin/emacs-latest" my-home))
#+END_SRC

* Load more of starter-kit
** Python
I don't like the python-mode in starter kit. See below where I do my
own Python initialization.
** Eshell
 #+BEGIN_SRC emacs-lisp
 (starter-kit-load "eshell")
 #+END_SRC

** Lisp
This should load elisp, scheme, cl, and clojure stuff.
At least, according to [[file:starter-kit-lisp.org][starter-kit-lisp.org]].
#+BEGIN_SRC emacs-lisp
(starter-kit-load "lisp")
#+END_SRC

* Python
** Basic Python Setup
#+BEGIN_SRC emacs-lisp
  (require 'python)
  
  ;; setup completion, etc. for IPython
  (setq
   python-shell-interpreter "ipython"
   python-shell-interpreter-args ""
   python-shell-prompt-regexp "In \\[[0-9]+\\]: "
   python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
   python-shell-completion-setup-code
     "from IPython.core.completerlib import module_completion"
   python-shell-completion-module-string-code
     "';'.join(module_completion('''%s'''))\n"
   python-shell-completion-string-code
     "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
  
  (setq python-skeleton-autoinsert t)
  ;; TODO: Use a different directory for pydoc-info?
  ;; TODO: Only run this if pydoc-info is installed
  ;; (add-to-list 'load-path (expand-file-name "~/.emacs.d/subs/pydoc-info"))
  ;; (require 'pydoc-info)
  ;; (info-lookup-add-help
  ;;    :mode 'python-mode
  ;;    :parse-rule 'pydoc-info-python-symbol-at-point
  ;;    :doc-spec
  ;;    '(("(python)Index" pydoc-info-lookup-transform-entry)
  ;;      ("(TARGETNAME)Index" pydoc-info-lookup-transform-entry)))  
#+END_SRC
