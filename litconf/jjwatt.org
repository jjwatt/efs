#+TITLE: Test Out new config
#+OPTIONS: toc:2 num:nil ^:nil

* Doing it
- Just a few things to get started and make sure that this works.

- Add litconfig directory to load-path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path litconfig-dir)
(load-theme 'wombat)
#+END_SRC

* Customization File
Emacs normally just appends the custom variables lisp to the end of
=init.el=. I'd rather keep it in a separate file.
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" "~/.emacs.d"))
#+END_SRC

* Cask
#+BEGIN_SRC emacs-lisp
(require 'cask (expand-file-name "cask/cask.el" "~/.emacs.d"))
(cask-initialize)
#+END_SRC

* Start Kit Functions
I'm grabbing some functions from starter kit in case I wan to load
parts of the starter kit. Although, once I finish with my config, I
don't imagine I will.

** Starter Kit Dependencies
- Ubiquitous Packages which should be loaded on startup rather than
  autoloaded on demand since they are likely to be used in every
  session.
  #+name: starter-kit-load-on-startup
  #+begin_src emacs-lisp
    (require 'cl)
    (require 'saveplace)
    (require 'ffap)
    (require 'uniquify)
    (require 'ansi-color)
    (require 'recentf)
  #+end_src

- Functions for loading other parts of the starter kit
  #+name: starter-kit-load
  #+begin_src emacs-lisp
    (defun starter-kit-load (file &optional header-or-tag)
      "Load configuration from other starter-kit-*.org files.
    If the optional argument is the id of a subtree then only
    configuration from within that subtree will be loaded.  If it is
    not an id then it will be interpreted as a tag, and only subtrees
    marked with the given tag will be loaded.

    For example, to load all of starter-kit-lisp.org simply
    add (starter-kit-load \"lisp\") to your configuration.

    To load only the 'window-system' config from
    starter-kit-misc-recommended.org add
     (starter-kit-load \"misc-recommended\" \"window-system\")
    to your configuration."
      (let ((file (expand-file-name (if (string-match "starter-kit-.+\.org" file)
                                        file
                                      (format "starter-kit-%s.org" file))
                                    starter-kit-dir)))
        (org-babel-load-file
         (if header-or-tag
             (let* ((base (file-name-nondirectory file))
                    (dir  (file-name-directory file))
                    (partial-file (expand-file-name
                                   (concat "." (file-name-sans-extension base)
                                           ".part." header-or-tag ".org")
                                   dir)))
               (unless (file-exists-p partial-file)
                 (with-temp-file partial-file
                   (insert
                    (with-temp-buffer
                      (insert-file-contents file)
                      (save-excursion
                        (condition-case nil ;; collect as a header
                            (progn
                              (org-link-search (concat"#"header-or-tag))
                              (org-narrow-to-subtree)
                              (buffer-string))
                          (error ;; collect all entries with as tags
                           (let (body)
                             (org-map-entries
                              (lambda ()
                                (save-restriction
                                  (org-narrow-to-subtree)
                                  (setq body (concat body "\n" (buffer-string)))))
                              header-or-tag)
                             body))))))))
               partial-file)
           file))))
  #+end_src
** Setting from M-x customize
#+begin_src emacs-lisp
  (load custom-file 'noerror)
#+end_src

** starter-kit-defuns
The starter-kit-defuns.org file contains a
starter-kit-coding-hook. I'm not sure if I want to keep using it, but
I'll put it here for now.

*** Coding Hook
#+name: starter-kit-hook-functions
#+begin_src emacs-lisp
  (defun starter-kit-local-column-number-mode ()
    (make-local-variable 'column-number-mode)
    (column-number-mode t))

  (defun starter-kit-local-comment-auto-fill ()
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (auto-fill-mode t))

  (defun starter-kit-turn-on-save-place-mode ()
    (setq save-place t))

  (defun starter-kit-turn-on-whitespace ()
    (whitespace-mode t))
#+end_src

#+name: starter-kit-add-local-column-number-mode
#+begin_src emacs-lisp
  (add-hook 'starter-kit-coding-hook 'starter-kit-local-column-number-mode)
#+end_src

#+name: start-kit-add-local-comment-auto-fill
#+begin_src emacs-lisp
  (add-hook 'starter-kit-coding-hook 'starter-kit-local-comment-auto-fill)
#+end_src

#+name: starter-kit-add-pretty-lambdas
#+begin_src emacs-lisp
    (when (window-system)
      (add-hook 'starter-kit-coding-hook 'starter-kit-pretty-lambdas))
#+end_src

#+name: starter-kit-run-starter-kit-coding-hook
#+begin_src emacs-lisp
  (defun run-starter-kit-coding-hook ()
    "Enable things that are convenient across all coding buffers."
    (run-hooks 'starter-kit-coding-hook))
#+end_src

*** Recentf Ido Find File
  I don't know if I use this much, either.

#+srcname: starter-kit-recentf-ido-find-file
#+begin_src emacs-lisp 
  (defun recentf-ido-find-file ()
    "Find a recent file using Ido."
    (interactive)
    (let* ((file-assoc-list
            (mapcar (lambda (x)
                      (cons (file-name-nondirectory x)
                            x))
                    recentf-list))
           (filename-list
            (remove-duplicates (mapcar #'car file-assoc-list)
                               :test #'string=))
           (filename (ido-completing-read "Choose recent file: "
                                          filename-list
                                          nil
                                          t)))
      (when filename
        (find-file (cdr (assoc filename
                               file-assoc-list))))))
#+end_src 

* Key Bindings
It might be nice to try to group all key binding settings in this
section. For now, it will at least contain general keybindings, and
some more specific keybindings might still exist closer to their
application.

** Completion and Expansion
#+begin_src emacs-lisp 
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** Turn on the menu bar for exploring new modes
#+begin_src emacs-lisp 
(global-set-key [f1] 'menu-bar-mode)
#+end_src

** File finding
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
  (global-set-key (kbd "C-x C-p") 'find-file-at-point)
  (global-set-key (kbd "C-c y") 'bury-buffer)
  (global-set-key (kbd "C-c r") 'revert-buffer)
  (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x f") 'recentf-ido-find-file)
#+end_src

** Window switching. (C-x o goes to the next window)
#+begin_src emacs-lisp 
(windmove-default-keybindings) ;; Shift+direction
(global-set-key (kbd "C-x O")
                (lambda ()
                  (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o")
                (lambda ()
                  (interactive) (other-window 2))) ;; forward two
#+end_src

** Indentation help
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x ^") 'join-line)
#+end_src

** If you want to be able to M-x without meta
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
#+end_src

* Org-mode
Arguably the most important for me. In my previous config, I
autoloaded files from an init.d directory under my .emacs.d. I'll just
start ripping pieces out of my org.el and making them work here. It
will be a lot more organized than my current org.el.  Let's get
started.

** Load Path
I should already have org-mode loaded by the starterkit and my
ORG_HOME, so I shouldn't need to add it to my load path anymore. I
want to make sure the contrib directory for org-mode is in my load
path, though. I'll setup the mode-alist here, too (and possibly other
top-level stuff later).

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
;; this probably isn't needed with the starter-kit
(setq  org-insert-mode-line-in-empty-file t)
(require 'org)
#+END_SRC

** Global Org Keys
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Local Org Keys
I'm leaving this commented for now because I haven't pulled in
org-pomodoro yet.
Now, I'm adding it back in.
#+BEGIN_SRC emacs-lisp
(require 'org-pomodoro)
(local-set-key "\C-co" 'org-pomodoro)
#+END_SRC

** Org Directories and Special Files
I use =~/org= as my base. I also have an =~/org/personal= directory
that is encrypted, but it gets dynamically loaded in special agenda
views which you can see later on.
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-default-ideas-file (concat org-directory "/ideas.org"))
  (setq org-agenda-files '("~/org" "~/org/work/mtp.org"))
  (setq org-refile-targets '((nil :maxlevel . 2)
                             (org-agenda-files :maxlevel . 1)))
#+END_SRC

** Other Org Settings Variables
I won't explain each setting variable right now, but I'll try to group
them all here.
#+BEGIN_SRC emacs-lisp
    (setq org-log-done 'time)
    (setq org-refile-use-outline-path 'file)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-enforce-todo-dependencies t)
    (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-agenda-dim-blocked-tasks t)

  ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

  ; Use IDO for both buffer and file completion and ido-everywhere to t
  (setq org-completion-use-ido t)
  (setq ido-everywhere t)
  (setq ido-max-directory-size 100000)
  (ido-mode (quote both))

  ; Use the current window when visiting files and buffers with ido
  (setq ido-default-file-method 'selected-window)
  (setq ido-default-buffer-method 'selected-window)

  ;; remember clocking between sessions
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)

  ;; logbook drawer and clocking
  (setq org-log-into-drawer t)
  (setq org-clock-into-drawer t)

  ;; archive setup
  (setq org-archive-mark-done nil)
  (setq org-archive-location "%s_archive::* Archived Tasks")

  ;; preserve indentation for babel (makefiles)
  (setq org-src-preserve-indentation t)
#+END_SRC

** Org Hooks
If you didn't know, emacs loves hooks (as most interactive and
programmable software should). You can add hooks for
different modes that enable other modes, set variables, or do anything
at all really. Here is where I setup some hooks for org-modes.

I like abbrev-mode. honestly, I haven't been using auto-fill mode
lately. I'll comment it out for now.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (abbrev-mode t)))
  (add-hook 'org-mode-hook (lambda () (remove-hook 'before-save-hook 'whitespace-cleanup)))
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-capture-mode-hook 'auto-fill-mode)
#+END_SRC

** Org Tasks
These can be overrided or appended per-file. But, these are my default
tasks types.
#+BEGIN_SRC emacs-lisp
  ; Setup Tasks
  (setq org-todo-keywords
        (quote (
        (type "NOTE(N)" "IDEA(i)" "|" "DISMISSED")
        (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE")
        )))
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "tomato" :weight bold)
                ("NEXT" :foreground "wheat" :weight bold)
                ("DONE" :foreground "spring green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "dim gray" :weight bold)
                ("PHONE" :foreground "orchid" :weight bold)
                ("NOTE" :foreground "dark turquoise" :weight bold)
                ("IDEA" :foreground "yellow1" :weight bold))))
#+END_SRC
** Capture Templates
These are for quickly capturing stuff from any buffer in emacs. These
are awesome. If you use org-mode, but have never used the capture-mode
stuff, try it out! Mine is fairly basic right now. Notes, Ideas,
Todos, and I added Work Journal and Journal entries because I use
separate journal.org files for writing longer journal-like entries.
#+BEGIN_SRC emacs-lisp
;; capture templates
(setq org-capture-templates
      '(("t" "Todo" entry (file org-default-notes-file)
        "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
        ("n" "Note" entry (file org-default-notes-file)
         "* NOTE %? %^G\n%U\n  %i\n  %a\n")
        ("i" "Idea" entry (file org-default-ideas-file)
         "* IDEA %?\n%U\n%a\n" :clock-in t :clock-resume t)
        ("J" "Work Journal" entry
         (file+datetree (concat org-directory "/journal.org"))
         "* %?\nEntered on %U\n  %i\n  %a")
        ("j" "Personal Journal" entry
         (file+datetree (concat org-directory "/personal/journal.org"))
         "* %?\nEntered on %U\n  %i\n  %a")
        ("x" "X selection" entry (file org-default-notes-file)
         "* %? \n%U\n  %i\n  %x\n")))
#+END_SRC

** Agendas
I like most of the default agenda commands, but since I want to keep
separate agendas for work and personal stuff, I just use hooks to bind
resetting the =org-agenda-files= variable before building my
agendas. Yes, I love you org-mode, I love you lisp, and I love you
emacs.

Define Agenda Files. By default, I use all files ending in =.org= and
=.org.gpg=. The default place for my agenda files is the same as my
org-directory. So any files that match this regexp in there will be
considered for the agenda views.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-file-regexp "\\`[^.].*\\.org\\(\\.gpg\\)?\\'")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("P" "Personal agenda"
         agenda "Personal" ((org-agenda-files '("~/org/personal"))
                            ))
        ("A" "Agenda for everything"
          agenda "Everything"
          ((org-agenda-files '("~/org" "~/org/personal"))
           ))))
#+END_SRC

** Babel
Here are a few config items for Babel, code blocks and literate
programming. I'm sure this section will get bigger as I'm getting
really into LP lately. It's one reason why I'm getting down with this
emacs24-starter-kit joint.
#+BEGIN_SRC emacs-lisp
;; stuff for code blocks
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)

;; load languages with babel
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
                                    (R . t)
                                    (python . t)
                                    (sh . t)
                                    (dot . t)
                                    (ditaa . t)
                                    (ruby . t)
                                    (gnuplot . t)
                                    (clojure . t)
                                    (ledger . t)
                                    (org . t)
                                    (plantuml . t)
                                    (latex . t)
                                    ;; Was getting an ob-makefile not found.
                                    ;; (makefile . t)
                                    )))
;; Do not prompt to confirm evaluation
(setq org-confirm-babel-evaluate nil)

;; Use fundamental mode when editing plantuml blocks
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

#+END_SRC

** Skeletons and Abbrevs
#+BEGIN_SRC emacs-lisp
(define-skeleton jwatt/org-src-name-block
  "Insert #+name"
  "name: "
  > "#+name: " str
  ?\n "#+begin_src "
  ("headers:" str " ")
  & -1
  ?\n _ ?\n
  "#+end_src"
  )


(define-abbrev org-mode-abbrev-table "<sn" "" 'jwatt/org-src-name-block)
#+END_SRC
** Custom Org Functions
*** Org Archiving
I stole this from (TODO: insert ref). He has a great setup, and his
literate org guide is an excellent way to get started with org-mode.
#+BEGIN_SRC emacs-lisp
(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))
#+END_SRC

* Defaults
Some better defaults. I'm not sure if starter-kit loads these or not yet.
#+BEGIN_SRC emacs-lisp
  (progn
    (ido-mode t)
    (setq ido-enable-flex-matching t)

    (menu-bar-mode -1)
    (when (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
    (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

    (require 'uniquify)
    (setq uniquify-buffer-name-style 'forward)

    (require 'saveplace)
    (setq-default save-place t)

    (global-set-key (kbd "M-/") 'hippie-expand)
    (global-set-key (kbd "C-x C-b") 'ibuffer)

    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)
    (global-set-key (kbd "C-M-s") 'isearch-forward)
    (global-set-key (kbd "C-M-r") 'isearch-backward)

    (setq tramp-copy-size-limit 1000000)

    ;; TODO: should probably move this to a different section.
    (setq smex-save-file (concat user-emacs-directory ".smex-items"))
    (smex-initialize)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

    (show-paren-mode 1)
    (setq-default indent-tabs-mode nil)
    (setq x-select-enable-clipboard t
          x-select-enable-primary t
          save-interprogram-paste-before-kill t
          apropos-do-all t
          mouse-yank-at-point t
          save-place-file (concat user-emacs-directory "places")
          backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                   "backups")))))
#+END_SRC

* Encryption
Make sure epa (EasyPG) is enabled for encryption.

More on encryption and encryption with org-mode here:
[[http://orgmode.org/worg/org-tutorials/encrypting-files.html][Org Mode Encryption]]

More on EasyPG in the manual:
[[http://www.gnu.org/software/emacs/manual/html_mono/epa.html#Quick-start][EasyPG Manual]]

#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(epa-file-enable)
#+END_SRC

** Auto encrypt/decrypt files
With the EasyPG Agent, any file that ends in =.gpg= will be
encrypted. However, emacs modes are usually turned on based on the
filename. So, you will want to add a mode setting to the top of all of
your =*.org= files and any files for which you'd like to turn on
modes. Adding file-level settings is a good idea in the first place.

#+BEGIN_SRC org
# -*- mode:org; epa-file-encrypt-to: ("me@mydomain.com") -*-
#+END_SRC

Adding epa-file-encrypt-to to the file-level settings should help
ensure that epa doesn't keep asking for the key we want to use and the
pass phrase for the key.

I recommend setting up and using gpg-agent instead of storing
pass phrases in the cache: [[http://www.gnupg.org/documentation/manuals/gnupg/#Invoking-GPG_002dAGENT][GnuPG Manual]]

* Hooks
There are some dependencies here. You might need to add some packages
to Cask.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (defun pnh-add-watchwords ()
                            (font-lock-add-keywords
                             nil `(("\\<\\(FIX\\(ME\\)?\\|TODO\\)"
                                    1 font-lock-warning-face t)))))

(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'idle-highlight-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

(add-hook 'emacs-lisp-mode-hook 'paredit-mode)
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

* UI
I like a blinky cursor. I like a bigger fringe. Let's make sure we get
maximum font-lock-decoration.
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode)
(if (fboundp 'fringe-mode)
    (fringe-mode 10))

(global-font-lock-mode 1)
(setq font-lock-maximum-decoration t)
#+END_SRC

* Whitespace
#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face tabs spaces trailing lines space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark))
;; TODO: only turn this on for some programming modes. It keeps messing up makefiles.
;; (add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'make-file-mode-hook '(lambda ()
                                 (setq indent-tabs-mode t)
                                  (setq org-src-preserve-indentation t)))
;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

#+END_SRC


* IDO Setup
I've spread some ido setup around this file, and I should put it all
together at one point. Some of these are really important to me,
especially the vertical ido results.
#+BEGIN_SRC emacs-lisp
;; Display ido results vertically, rather than horizontally
(setq ido-decorations '("\n-> " "" "\n " "\n ..." "[" "]"
                        " [No match]" " [Matched]" " [Not readable]"
                        " [Too big]" " [Confirm]"))

(add-hook 'ido-minibuffer-setup-hook
          (defun ido-disable-line-truncation ()
            (set (make-local-variable 'truncate-lines) nil)))

(defun jf-ido-define-keys () ;; C-n/p is more intuitive in vertical layout
  (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))

(add-hook 'ido-setup-hook 'jf-ido-define-keys)
#+END_SRC

* Fancy keys
Let's get an undo tree, some ace-jump-mode and some key-chords going.
You might want to add these to your Cask:
#+BEGIN_SRC lisp
(depends-on "undo-tree")
(depends-on "ace-jump-mode")
(depends-on "key-chord")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)

(require 'ace-jump-mode)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)

(require 'key-chord)
(key-chord-define-global "jj" 'ace-jump-word-mode)
;;(key-chord-define-global "jl" 'ace-jump-line-mode)
;;(key-chord-define-global "jk" 'ace-jump-char-mode)
;;(key-chord-define-global "kk" 'just-one-space)
;;(key-chord-define-global "KK" 'delete-horizontal-space)
(key-chord-define-global "JJ" 'prelude-switch-to-previous-buffer)
(key-chord-define-global "uu" 'undo-tree-visualize)
(key-chord-mode 1)
#+END_SRC

